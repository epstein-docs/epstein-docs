---
layout: base.njk
title: People
---

<h1>People</h1>
<p class="subtitle">{{ indices.people.length }} people mentioned across documents</p>

<div class="search-box">
  <input type="text" id="search" placeholder="Search people...">
</div>

<div class="alphabet-nav">
  <button class="letter-btn active" data-letter="all">All</button>
  {% for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' %}
  <button class="letter-btn" data-letter="{{ letter }}">{{ letter }}</button>
  {% endfor %}
</div>

<div id="results">
  {% for person in indices.people %}
  <details class="entity-item" data-name="{{ person.name }}" data-letter="{{ person.name[0] | upper }}" id="{{ person.name | slugify }}">
    <summary class="entity-summary">
      <span class="entity-name">{{ person.name }}</span>
      <span class="entity-count">{{ person.count }} {{ "document" if person.count == 1 else "documents" }}</span>
    </summary>
    <div class="entity-content">
      {% for doc in person.docs %}
      <div class="document-card-compact">
        <a href="/document/{{ doc.unique_id | slugify }}/" class="doc-link">
          <strong>Document {{ doc.document_number }}</strong>
        </a>
        <div class="meta-compact">
          {% if doc.document_metadata.document_type %}{{ doc.document_metadata.document_type }}{% endif %}
          {% if doc.document_metadata.date %} · {{ doc.document_metadata.date }}{% endif %}
          · {{ doc.page_count }} {{ "page" if doc.page_count == 1 else "pages" }}
        </div>
      </div>
      {% endfor %}
    </div>
  </details>
  {% endfor %}
</div>

<script>
  const search = document.getElementById('search');
  const results = document.getElementById('results');
  const letterBtns = document.querySelectorAll('.letter-btn');
  const allItems = results.querySelectorAll('.entity-item');

  // Search functionality
  search.addEventListener('input', (e) => {
    const query = e.target.value.toLowerCase();
    allItems.forEach(item => {
      const name = item.dataset.name.toLowerCase();
      item.style.display = name.includes(query) ? 'block' : 'none';
    });
  });

  // Alphabet filter
  letterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const letter = btn.dataset.letter;

      // Update active state
      letterBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      // Clear search
      search.value = '';

      // Filter items
      allItems.forEach(item => {
        if (letter === 'all') {
          item.style.display = 'block';
        } else {
          item.style.display = item.dataset.letter === letter ? 'block' : 'none';
        }
      });
    });
  });
</script>
