---
layout: base.njk
title: Document Analyses
---

<h1>Document Analyses</h1>
<p class="subtitle">AI-generated summaries for <span id="total-count">{{ analyses.length }}</span> documents</p>

<div class="search-box">
  <input type="text" id="search" placeholder="Search analyses...">
</div>

<div class="filter-buttons">
  <button class="filter-btn active" data-type="all">All</button>
  {% for type in analysisDocumentTypes %}
  <button class="filter-btn" data-type="{{ type | lower }}">{{ type }}</button>
  {% endfor %}
</div>

<div class="pagination-controls">
  <button id="prev-page" disabled>← Previous</button>
  <span id="page-info">Page 1</span>
  <button id="next-page">Next →</button>
  <span class="page-size-selector">
    Show:
    <select id="page-size">
      <option value="50">50</option>
      <option value="100" selected>100</option>
      <option value="250">250</option>
      <option value="500">500</option>
    </select>
    per page
  </span>
</div>

<div class="table-container">
  <table class="analyses-table">
    <thead>
      <tr>
        <th>Document</th>
        <th>Type</th>
        <th>Pages</th>
        <th>Summary</th>
      </tr>
    </thead>
    <tbody id="results">
      {% for item in analyses %}
      <tr class="analysis-row" data-type="{{ item.analysis.document_type | lower }}">
        <td class="doc-number">
          <a href="/document/{{ item.document_id | slugify }}/">{{ item.document_number }}</a>
        </td>
        <td class="doc-type">
          <span class="doc-type-badge">{{ item.analysis.document_type }}</span>
        </td>
        <td class="page-count">{{ item.page_count }}</td>
        <td class="summary">{{ item.analysis.summary }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

<style>
  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    color: #2c3e50;
    cursor: pointer;
    transition: all 0.2s;
  }

  .filter-btn:hover {
    border-color: #3498db;
    color: #3498db;
  }

  .filter-btn.active {
    background: #3498db;
    border-color: #3498db;
    color: white;
  }

  .pagination-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
  }

  .pagination-controls button {
    padding: 0.5rem 1rem;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s;
  }

  .pagination-controls button:hover:not(:disabled) {
    border-color: #3498db;
    color: #3498db;
  }

  .pagination-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  #page-info {
    font-size: 0.875rem;
    color: #666;
    margin: 0 0.5rem;
  }

  .page-size-selector {
    margin-left: auto;
    font-size: 0.875rem;
    color: #666;
  }

  .page-size-selector select {
    padding: 0.25rem 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    margin: 0 0.5rem;
  }

  .table-container {
    overflow-x: auto;
    background: white;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
  }

  .analyses-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9rem;
    table-layout: fixed;
  }

  .analyses-table thead {
    background: #f8f9fa;
    border-bottom: 2px solid #e0e0e0;
  }

  .analyses-table th {
    padding: 0.75rem 1rem;
    text-align: left;
    font-weight: 600;
    color: #2c3e50;
  }

  .analyses-table td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #f0f0f0;
    vertical-align: top;
  }

  .analyses-table tbody tr:hover {
    background: #f8f9fa;
  }

  /* Fixed column widths */
  .analyses-table th:nth-child(1),
  .analyses-table td:nth-child(1) {
    width: 15%;
    min-width: 120px;
  }

  .analyses-table th:nth-child(2),
  .analyses-table td:nth-child(2) {
    width: 12%;
    min-width: 100px;
  }

  .analyses-table th:nth-child(3),
  .analyses-table td:nth-child(3) {
    width: 8%;
    min-width: 60px;
  }

  .analyses-table th:nth-child(4),
  .analyses-table td:nth-child(4) {
    width: 65%;
  }

  .doc-number {
    font-weight: 500;
    font-size: 0.85rem;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .doc-number a {
    color: #3498db;
    text-decoration: none;
  }

  .doc-number a:hover {
    text-decoration: underline;
  }

  .doc-type {
    white-space: nowrap;
  }

  .doc-type-badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    background: #3498db;
    color: white;
    border-radius: 4px;
    font-size: 0.7rem;
    font-weight: 500;
    text-transform: capitalize;
  }

  .page-count {
    text-align: center;
    color: #666;
    white-space: nowrap;
  }

  .summary {
    line-height: 1.5;
    color: #2c3e50;
  }

  @media (max-width: 900px) {
    .analyses-table {
      font-size: 0.85rem;
    }

    .analyses-table th,
    .analyses-table td {
      padding: 0.5rem 0.75rem;
    }
  }

  @media (max-width: 900px) {
    .pagination-controls {
      flex-wrap: wrap;
    }

    .page-size-selector {
      margin-left: 0;
      width: 100%;
      text-align: center;
    }
  }

  @media (max-width: 600px) {
    .pagination-controls {
      padding: 0.75rem;
      gap: 0.5rem;
    }

    .pagination-controls button {
      font-size: 0.8rem;
      padding: 0.4rem 0.75rem;
    }

    #page-info {
      font-size: 0.75rem;
    }

    /* Stack table on mobile */
    .analyses-table thead {
      display: none;
    }

    .analyses-table,
    .analyses-table tbody,
    .analyses-table tr,
    .analyses-table td {
      display: block;
      width: 100%;
    }

    .analyses-table tr {
      margin-bottom: 1rem;
      border: 1px solid #e0e0e0;
      border-radius: 6px;
      overflow: hidden;
    }

    .analyses-table td {
      padding: 0.75rem;
      border-bottom: 1px solid #f0f0f0;
      position: relative;
      padding-left: 40%;
    }

    .analyses-table td::before {
      content: attr(data-label);
      position: absolute;
      left: 0.75rem;
      font-weight: 600;
      color: #666;
    }

    .analyses-table td:last-child {
      border-bottom: none;
    }

    .doc-number::before { content: "Document: "; }
    .doc-type::before { content: "Type: "; }
    .page-count::before { content: "Pages: "; }
    .summary::before { content: "Summary: "; }

    .summary {
      padding-left: 0.75rem;
    }

    .summary::before {
      position: relative;
      left: 0;
      display: block;
      margin-bottom: 0.5rem;
    }
  }
</style>

<script>
  const search = document.getElementById('search');
  const results = document.getElementById('results');
  const allRows = Array.from(results.querySelectorAll('.analysis-row'));
  const filterButtons = document.querySelectorAll('.filter-btn');
  const prevButton = document.getElementById('prev-page');
  const nextButton = document.getElementById('next-page');
  const pageInfo = document.getElementById('page-info');
  const pageSizeSelect = document.getElementById('page-size');
  const totalCount = document.getElementById('total-count');

  let currentFilter = 'all';
  let currentSearch = '';
  let currentPage = 1;
  let pageSize = 100;
  let filteredRows = allRows;

  // Filter and pagination function
  function applyFiltersAndPagination() {
    // First, filter rows based on type and search
    filteredRows = allRows.filter(row => {
      const matchesType = currentFilter === 'all' || row.dataset.type === currentFilter;

      let matchesSearch = true;
      if (currentSearch !== '') {
        const rowText = row.textContent.toLowerCase();
        matchesSearch = rowText.includes(currentSearch);
      }

      return matchesType && matchesSearch;
    });

    // Update total count
    totalCount.textContent = filteredRows.length;

    // Calculate pagination
    const totalPages = Math.ceil(filteredRows.length / pageSize);
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;

    // Hide all rows first
    allRows.forEach(row => row.style.display = 'none');

    // Show only current page rows
    filteredRows.slice(startIndex, endIndex).forEach(row => {
      row.style.display = '';
    });

    // Update pagination controls
    pageInfo.textContent = `Page ${currentPage} of ${totalPages || 1} (${filteredRows.length} total)`;
    prevButton.disabled = currentPage <= 1;
    nextButton.disabled = currentPage >= totalPages;
  }

  // Search handler
  search.addEventListener('input', (e) => {
    currentSearch = e.target.value.toLowerCase().trim();
    currentPage = 1; // Reset to first page on search
    applyFiltersAndPagination();
  });

  // Filter button handlers
  filterButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      filterButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentFilter = btn.dataset.type;
      currentPage = 1; // Reset to first page on filter change
      applyFiltersAndPagination();
    });
  });

  // Pagination handlers
  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      applyFiltersAndPagination();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  });

  nextButton.addEventListener('click', () => {
    const totalPages = Math.ceil(filteredRows.length / pageSize);
    if (currentPage < totalPages) {
      currentPage++;
      applyFiltersAndPagination();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  });

  pageSizeSelect.addEventListener('change', (e) => {
    pageSize = parseInt(e.target.value);
    currentPage = 1; // Reset to first page on page size change
    applyFiltersAndPagination();
  });

  // Initial render
  applyFiltersAndPagination();
</script>
